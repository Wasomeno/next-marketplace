generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Product {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String
  price       Int
  stock       Int
  category_id Int
  slug        String
  cart_items  CartItem[]
  orders      Order[]
  images      ProductImage[]
  category    Category       @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@index([category_id])
}

model ProductImage {
  id         Int     @id @default(autoincrement())
  product_id Int
  image_url  String
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([product_id])
}

model Cart {
  id         Int        @id @default(autoincrement())
  user_email String     @unique
  user       User       @relation(fields: [user_email], references: [email])
  items      CartItem[]
}

model CartItem {
  id         Int     @id @default(autoincrement())
  cart_id    Int
  product_id Int
  amount     Int
  cart       Cart    @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([product_id])
  @@index([cart_id])
}

model Category {
  id          Int             @id @default(autoincrement())
  name        String
  description String
  slug        String          @unique
  products    Product[]
  images      CategoryImage[]
}

model CategoryImage {
  id          Int      @id @default(autoincrement())
  category_id Int
  image_url   String
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@index([category_id])
}

model Order {
  id         String      @id
  user       String
  total      Int
  status_id  Int
  created_at DateTime    @default(now())
  status     OrderStatus @relation(fields: [status_id], references: [id])
  products   Product[]

  @@index([status_id])
}

model OrderStatus {
  id     Int     @id @default(autoincrement())
  name   String
  orders Order[]
}

model Admin {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
}

model OrderToProduct {
  A String
  B Int

  @@unique([A, B], map: "_OrderToProduct_AB_unique")
  @@index([B], map: "_OrderToProduct_B_index")
  @@map("_OrderToProduct")
}

model CartToProduct {
  A Int
  B Int

  @@unique([A, B], map: "_CartToProduct_AB_unique")
  @@index([B], map: "_CartToProduct_B_index")
  @@map("_CartToProduct")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  cart          Cart?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
