generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id            Int       @id @default(autoincrement())
  name          String
  description   String
  profile_image String
  location      String
  created_at    DateTime  @default(now())
  owner_email   String    @unique
  slug          String    @unique
  products      Product[]
  owner         User      @relation(fields: [owner_email], references: [email])
  invoices      Invoice[]

  @@index([owner_email])
}

model Product {
  id                 Int             @id @default(autoincrement())
  store_id           Int
  name               String          @unique
  description        String
  price              Int
  stock              Int
  slug               String          @unique
  featured_image_url String
  status             String
  sold               Int             @default(0)
  reviews            ProductReview[]
  cart_items         CartItem[]
  wishlist_items     WishlistItem[]
  images             ProductImage[]
  order_products     OrderProduct[]
  categories         Category[]
  store              Store           @relation(fields: [store_id], references: [id])

  @@index([store_id])
}

model ProductImage {
  id         Int     @id @default(autoincrement())
  name       String
  product_id Int
  url        String
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([product_id])
}

model ProductReview {
  id         Int      @id @default(autoincrement())
  product_id Int
  user_id    String
  created_at DateTime @default(now())
  rating     Int
  review     String?
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([product_id])
}

model Banner {
  id   Int    @id @default(autoincrement())
  name String
  url  String
}

model Cart {
  id         Int        @id @default(autoincrement())
  user_email String     @unique
  user       User       @relation(fields: [user_email], references: [email])
  items      CartItem[]
}

model CartItem {
  id         Int     @id @default(autoincrement())
  cart_id    Int
  product_id Int
  amount     Int
  cart       Cart    @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([product_id])
  @@index([cart_id])
}

model Wishlist {
  id         Int            @id @default(autoincrement())
  user_email String         @unique
  user       User           @relation(fields: [user_email], references: [email])
  items      WishlistItem[]
}

model WishlistItem {
  id          Int      @id @default(autoincrement())
  wishlist_id Int
  product_id  Int
  wishlist    Wishlist @relation(fields: [wishlist_id], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([product_id])
  @@index([wishlist_id])
}

model Category {
  id          Int             @id @default(autoincrement())
  name        String
  description String
  slug        String          @unique
  products    Product[]
  images      CategoryImage[]
}

model CategoryImage {
  id          Int      @id @default(autoincrement())
  name        String
  category_id Int
  url         String
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@index([category_id])
}

model Order {
  id         String    @id @default(cuid())
  total      Int
  created_at DateTime  @default(now())
  user_email String
  user       User      @relation(fields: [user_email], references: [email])
  invoices   Invoice[]

  @@index([user_email])
}

model Invoice {
  id         String         @id @unique
  store_id   Int
  order_id   String
  created_at DateTime       @default(now())
  status     String
  total      Int
  address    String         @default("")
  store      Store          @relation(fields: [store_id], references: [id])
  products   OrderProduct[]
  order      Order          @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@index([store_id])
  @@index([order_id])
}

model OrderProduct {
  id         Int     @id @default(autoincrement())
  invoice_id String
  amount     Int
  total      Int
  product_id Int
  isReviewed Boolean @default(false)
  product    Product @relation(fields: [product_id], references: [id])
  invoice    Invoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)

  @@index([product_id])
  @@index([invoice_id])
}

model Admin {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
}

model CartToProduct {
  A Int
  B Int

  @@unique([A, B], map: "_CartToProduct_AB_unique")
  @@index([B], map: "_CartToProduct_B_index")
  @@map("_CartToProduct")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  address       String?
  store_id      Int?
  cart          Cart?
  orders        Order[]
  reviews       ProductReview[]
  wishlist      Wishlist?
  accounts      Account[]
  sessions      Session[]
  store         Store?
  addresses     UserAddress[]

  @@index([store_id])
  @@map("users")
}

model UserAddress {
  id              String  @id @default(cuid())
  title           String
  city            String
  province        String
  subdistrict     String
  postNumber      String
  street          String
  additionalNotes String
  userEmail       String
  phoneNumber     String
  recipient       String
  isMainAddress   Boolean @default(false)
  user            User    @relation(fields: [userEmail], references: [email])

  @@index([userEmail])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model CategoryToProduct {
  A Int
  B Int

  @@unique([A, B], map: "_CategoryToProduct_AB_unique")
  @@index([B], map: "_CategoryToProduct_B_index")
  @@map("_CategoryToProduct")
}
